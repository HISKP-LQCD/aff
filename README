This project contains a library for accessing and manipulation of analysis files
in new binary format. The goal is to make it possible to work efficiently with
large amount of data.

Random thoughts:
---------------

Suggested directory structure:
./lib     contains sources of the library
./include contains library header files
./utils   xml2aff and aff sources
./docs    file format specifications (in .tex to build .pdf for distribution)

Library:
liblhpc-aff.a

Header file
lhpc-aff.h

Config script:
lhpc-aff-config
   --cc
   --cflags
   --ldflags
   --libs
   --version

Configure: no autoconf, but a simple script to generate Makefile and
lhcp-aff-config from CC and CFLAGS in environment and argument
--prefix= (defaulting to /usr/local).

Utilities:
xml2aff converts xml 2pt and 3pt files into aff. (? or is it a part of lhpc-aff)
lhpc-aff cmd [args]
  cmd:
   help              - prints a list of commands
   version           - version of the code
   cp f1 f2 ... fd   - joins files f1 ... and places the result into fd
   ls [-lR] f [path] - prints the contents of path in file f. Path defaults to /
                         -l long format (with data), -R recursive listing
   xml f name        - prints /name as xml (reverse of xml2aff)
   chk [-vq] f       - checks the structure of file f. Verbose/quiet flags.
(?) aff f xml [name] - place file xml under name into f, name defaults to the
                       name of the xml file. Aff f is created.


Useful prieces:

MD5 checksum routines are in <openssl/md5.h>. -- building it is a mess on BG/L,
get the reference implementation from RFC 1321.

Treap management routines are written.
Stable routines are written.
Tree routines are complete.
Aff interface is written.
